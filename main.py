import logging
import re
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import bot_token, group_chat_id, admins, doctors
from database.user_db import add_phone_number_to_user, add_name_to_user, add_birth_date_to_user, add_appointment_to_db, create_appointments_table, save_question, get_question_id, get_question, save_answer_to_db
from functions.user_functions import greet_user, back_to_menu
from keyboards.user_keyboard import main_keyboard, get_confirmation_markup, get_declaration_data_markup, get_back_markup
from keyboards.admin_keyboard import admin_keyboard, get_preview_markup
from database.admin_db import get_active_users_count, get_users_count, get_questions_count, get_all_user_ids, get_unanswered_questions
from functions.admin_functions import export_database_to_excel
from states import MyState, MyAnotherState, AnswerState, QuestionState, BroadcastState

logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
    
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await greet_user(message)

@dp.message_handler(lambda message: message.text == "üìë –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è")
async def declaration(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ù–∞–¥–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó", callback_data='provide_declaration_data'))
    await message.answer("–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—à–≤–∏–¥—à–∏—Ç–∏ –∞–±–æ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—é –∑ –Ω–∞—à–∏–º –ª—ñ–∫–∞—Ä–µ–º.", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data == 'provide_declaration_data')
async def provide_declaration_data(query: types.CallbackQuery):
    markup = get_declaration_data_markup()
    await bot.send_message(query.message.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=markup)
    await MyState.phone_number_received.set()

@dp.message_handler(content_types=['contact'], state=MyState.phone_number_received)
async def contact_received(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)

    back_markup = get_back_markup()

    await bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë:", reply_markup=back_markup)
    await MyState.waiting_for_name.set()

NAME_REGEX = re.compile(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë“ê“ë–Ñ—î–Ü—ñ–á—ó\'\-\s]+$')
DOB_REGEX = re.compile(r'^\d{2}\.\d{2}\.\d{4}$')

@dp.message_handler(state=MyState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await state.finish()
        await back_to_menu(message)
        return
    if not NAME_REGEX.match(message.text):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
        return

    user_real_name = message.text
    await state.update_data(real_name=user_real_name)

    await bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∞—à–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")
    await MyState.waiting_for_dob.set()

@dp.message_handler(state=MyState.waiting_for_dob)
async def process_dob(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await state.finish()
        await back_to_menu(message)
        return

    if not DOB_REGEX.match(message.text):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†.")
        return

    date_birth = message.text
    await state.update_data(date_of_birth=date_birth)

    data = await state.get_data()
    phone_number = data.get('phone_number', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –Ω–∞–¥–∞–Ω–æ')
    confirmation_message = (
        f"<b>–í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n"
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {phone_number}\n"
        f"<b>–ü–Ü–ë:</b> {data['real_name']}\n"
        f"<b>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</b> {data['date_of_birth']}\n\n"
        "<i>–í—Å–µ –≤—ñ—Ä–Ω–æ?</i>"
    )
    confirm_markup = get_confirmation_markup()

    await bot.send_message(message.chat.id, confirmation_message, reply_markup=confirm_markup, parse_mode=ParseMode.HTML)
    await MyState.confirm_data.set()


@dp.callback_query_handler(lambda query: query.data in ['confirm_yes', 'confirm_no'], state=MyState.confirm_data)
async def confirm_data(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'confirm_yes':
        data = await state.get_data()
        user_id = callback_query.from_user.id
        add_phone_number_to_user(user_id, data['phone_number'])
        add_name_to_user(user_id, data['real_name'])
        add_birth_date_to_user(user_id, data['date_of_birth'])

        declaration_message = (
            f"<b>üìë –ù–æ–≤–∞ –∑–∞—è–≤–∞ –Ω–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—é:</b>\n\n\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {data['phone_number']}\n"
            f"<b>–ü–Ü–ë:</b> {data['real_name']}\n"
            f"<b>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</b> {data['date_of_birth']}"
        )
        await bot.send_message(group_chat_id, declaration_message, parse_mode=ParseMode.HTML)

        await state.finish()
        await bot.send_message(user_id, "–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–ª–µ–Ω—ñ, –Ω–∞–π–±–ª–∏—â–∏–º —á–∞—Å–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π", reply_markup=main_keyboard())
    else:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await state.finish()
        await back_to_menu(callback_query.message)

@dp.message_handler(lambda message: message.text == "üë®‚Äç‚öïÔ∏è –ó–∞–ø–∏—Å")
async def schedule(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º", callback_data='make_an_appointment'))
    await message.answer("–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º –¥–æ –≤–∞—à–æ–≥–æ –ª—ñ–∫–∞—Ä—è.", reply_markup=keyboard)
    
@dp.callback_query_handler(lambda query: query.data == 'make_an_appointment')
async def provide_declaration_data(query: types.CallbackQuery):
    markup = get_declaration_data_markup()
    await bot.send_message(query.message.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=markup)
    await MyAnotherState.phone_number_received.set()

@dp.message_handler(content_types=['contact'], state=MyAnotherState.phone_number_received)
async def contact_received(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)

    back_markup = get_back_markup()

    await bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞:", reply_markup=back_markup)
    await MyAnotherState.waiting_for_patient_name.set()


@dp.message_handler(state=MyAnotherState.waiting_for_patient_name)
async def process_patient_name(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await state.finish()
        await back_to_menu(message)
        return

    if not NAME_REGEX.match(message.text):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
        return

    patient_real_name = message.text
    await state.update_data(patient_real_name=patient_real_name)

    doctor_keyboard = InlineKeyboardMarkup()
    doctor_keyboard.add(InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –ë–æ—Ä–æ–¥–∞–π –Ñ–≤–≥–µ–Ω –§–µ–¥–æ—Ä–æ–≤–∏—á", callback_data='doctor_1'))
    doctor_keyboard.add(InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –í–ª–∞–¥–∏—Å–ª–∞–≤–∞ –Ü–≥–æ—Ä—ñ–≤–Ω–∞", callback_data='doctor_2'))
    doctor_keyboard.add(InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –ê–Ω–¥—Ä—ñ—î–Ω–∫–æ –°–µ—Ä–≥—ñ–π –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á", callback_data='doctor_3'))

    await bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ª—ñ–∫–∞—Ä—è:", reply_markup=doctor_keyboard)
    await MyAnotherState.waiting_for_doctor_name.set()

@dp.callback_query_handler(lambda query: query.data in ['doctor_1', 'doctor_2'], state=MyAnotherState.waiting_for_doctor_name)
async def process_doctor_selection(callback_query: types.CallbackQuery, state: FSMContext):
    
    if callback_query.data == 'doctor_1':
        doctor_real_name = "–ë–æ—Ä–æ–¥–∞–π –Ñ–≤–≥–µ–Ω –§–µ–¥–æ—Ä–æ–≤–∏—á"
    elif callback_query.data == 'doctor_2':
        doctor_real_name = "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –í–ª–∞–¥–∏—Å–ª–∞–≤–∞ –Ü–≥–æ—Ä—ñ–≤–Ω–∞"
    else:
        doctor_real_name = "–ê–Ω–¥—Ä—ñ—î–Ω–∫–æ –°–µ—Ä–≥—ñ–π –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á"

    await state.update_data(doctor_real_name=doctor_real_name)

    await bot.send_message(callback_query.message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å —Ç–∞ –¥–∞—Ç—É –ø—Ä–∏–π–æ–º—É:")
    await MyAnotherState.waiting_for_dob.set()

@dp.message_handler(state=MyAnotherState.waiting_for_dob)
async def process_dob(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await state.finish()
        await back_to_menu(message)
        return

    date_birth = message.text
    await state.update_data(date_of_birth=date_birth)

    data = await state.get_data()
    phone_number = data.get('phone_number', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –Ω–∞–¥–∞–Ω–æ')
    confirmation_message = (
        f"<b>–í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n"
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {phone_number}\n"
        f"<b>–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞:</b> {data['patient_real_name']}\n"
        f"<b>–ü–Ü–ë –ª—ñ–∫–∞—Ä—è:</b> {data['doctor_real_name']}\n"
        f"<b>–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É:</b> {data['date_of_birth']}\n\n"
        "<i>–í—Å–µ –≤—ñ—Ä–Ω–æ?</i>"
    )
    confirm_markup = get_confirmation_markup()

    await bot.send_message(message.chat.id, confirmation_message, reply_markup=confirm_markup, parse_mode=ParseMode.HTML)
    await MyAnotherState.confirm_data.set()

@dp.callback_query_handler(lambda query: query.data in ['confirm_yes', 'confirm_no'], state=MyAnotherState.confirm_data)
async def confirm_data(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'confirm_yes':
        data = await state.get_data()
        user_id = callback_query.from_user.id

        create_appointments_table()
        add_appointment_to_db(user_id, data['phone_number'], data['patient_real_name'], data['doctor_real_name'], data['date_of_birth'])

        declaration_message = (
            f"<b>üìë –ù–æ–≤–∞ –∑–∞—è–≤–∞ –Ω–∞ –ø—Ä–∏–π–æ–º:</b>\n\n\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {data['phone_number']}\n"
            f"<b>–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞:</b> {data['patient_real_name']}\n"
            f"<b>–ü–Ü–ë –ª—ñ–∫–∞—Ä—è:</b> {data['doctor_real_name']}\n"
            f"<b>–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É:</b> {data['date_of_birth']}"
        )
        await bot.send_message(group_chat_id, declaration_message, parse_mode=ParseMode.HTML)

        await state.finish()
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∞ –Ω–∞ –ø—Ä–∏–π–æ–º –ø—Ä–∏–π–Ω—è—Ç–∞, –Ω–∞–π–±–ª–∏—â–∏–º —á–∞—Å–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π", reply_markup=main_keyboard())
    else:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await state.finish()
        await back_to_menu(callback_query.message)

@dp.message_handler(lambda message: message.text == "‚ùî –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
async def ask_question(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    if not await state.get_state():
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ó–∞–ª–∏—à–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='ask_question'))
        await message.answer("–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, —ñ –Ω–∞—à—ñ –ª—ñ–∫–∞—Ä—ñ –Ω–∞–¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data == 'ask_question')
async def ask_question_callback(query: types.CallbackQuery):
    await bot.send_message(query.message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è")
    await QuestionState.WaitingForQuestion.set()

    
@dp.message_handler(lambda message: message.text and message.text != "‚ùî –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", state=QuestionState.WaitingForQuestion)
async def handle_question(message: types.Message, state: FSMContext):
    question_text = message.text
    user_id = message.from_user.id
    user_name = message.from_user.username

    save_question(user_id, user_name, question_text)
    question_id = get_question_id(user_id, question_text)

    for doctor_id in doctors:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f'reply_{user_id}_{question_id}'))

        await bot.send_message(doctor_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user_name} (ID: {user_id}) –∑–∞–¥–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è:\n{question_text}", reply_markup=keyboard)

        await bot.send_message(message.chat.id, "–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await state.finish()

@dp.callback_query_handler(lambda query: query.data.startswith('reply_'))
async def reply_to_question(query: types.CallbackQuery):
    user_id, question_id = map(int, query.data.split('_')[1:])

    question = get_question(user_id, question_id)

    if question and question[6] == 0:
        user_name = question[2]
        question_text = question[3]

        await bot.answer_callback_query(query.id, "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:")
        await bot.send_message(query.message.chat.id, f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}:\n{question_text}")

        current_state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
        async with current_state.proxy() as data:
            data['question_id'] = question_id
            data['user_id'] = user_id
            data['user_name'] = user_name
            data['doctor_id'] = query.message.chat.id
        await AnswerState.WaitingForAnswer.set()
    else:
        await bot.answer_callback_query(query.id, "–¶–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

@dp.message_handler(state=AnswerState.WaitingForAnswer)
async def save_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        question_id = data['question_id']
        user_id = data['user_id']
        doctor_id = data['doctor_id']

    answer_text = message.text
    save_answer_to_db(question_id, answer_text)
    await bot.send_message(user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –ª—ñ–∫–∞—Ä—è:\n{answer_text}")
    await bot.send_message(doctor_id, "–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.")
    await state.finish()

@dp.message_handler(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_menu_handler(message: types.Message):
    await back_to_menu(message)


                                                                    ###ADMIN###
                                                                    
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id in admins:
        keyboard = admin_keyboard()
        await message.answer("–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def statistics_handler(message: types.Message):
    if message.from_user.id in admins:
        total_users = get_users_count()
        active_users = get_active_users_count()
        total_sales = get_questions_count()

        response_message = (
            f"üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"üì± –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_users}\n"
            f"üõçÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å: {total_sales}"
        )
        await message.answer(response_message)

@dp.message_handler(lambda message: message.text == '–í–∏–≥—Ä—É–∑–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö üíΩ')
async def export_database_handler(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–í–∏–≥—Ä—É–∂–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö...")
        await export_database_to_excel(message)

@dp.message_handler(text='–†–æ–∑—Å–∏–ª–∫–∞ üì¨', state=None)
async def send_broadcast_prompt(message: types.Message):
    if message.from_user.id in admins:
        await bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ä–æ–∑–º—ñ—Ç–∫—É *HTML*, —Ç–æ–±—Ç–æ:\n'
                                          '<b>*–ñ–∏—Ä–Ω–∏–π*</b>\n'
                                          '<i>_–ö—É—Ä—Å–∏–≤_</i>\n'
                                          '<pre>`–ú–æ–Ω–æ—à–∏—Ä–Ω–∏–π`</pre>\n'
                                          '<a href="—Å—Å–∏–ª–∫–∞-–Ω–∞-—Å–∞–π—Ç">[–û–±–µ—Ä–Ω—É—Ç–∏ —Ç–µ–∫—Å—Ç —É –ø–æ—Å–∏–ª–∞–Ω–Ω—è](https://www.telegrambotsfromroman.com/)</a>'.format(),
                                 parse_mode="markdown")
        await bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:")
        await BroadcastState.text.set()

@dp.message_handler(state=BroadcastState.text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç: {message.text}")
    async with state.proxy() as data:
        data['text'] = message.text
    await bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:")
    await BroadcastState.photo.set()

@dp.message_handler(content_types=['photo'], state=BroadcastState.photo)
async def process_broadcast_photo(message: types.Message, state: FSMContext):
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ: {message.photo[0].file_id}")
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await send_preview(message.chat.id, data, state) 
    await BroadcastState.preview.set()
    
async def send_preview(chat_id, data, state: FSMContext):
    markup = get_preview_markup()
    text = "üì£ *–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑—Å–∏–ª–∫–∏:*\n\n"
    text += data.get('text', '')

    if 'photo' in data and data['photo'] is not None:
        await bot.send_photo(chat_id, data['photo'], caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)

    async with state.proxy() as stored_data:
        stored_data.update(data)

@dp.callback_query_handler(text="send_broadcast", state=BroadcastState.preview)
async def send_broadcast_to_users_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get('text', '')
    photo = data.get('photo')
    await send_broadcast_to_users(text, photo, call.message.chat.id)
    await call.answer()
    
@dp.message_handler(commands=['skip'], state=[BroadcastState.text, BroadcastState.photo])
async def skip_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'text' not in data:
            data['text'] = None
        if 'photo' not in data:
            data['photo'] = None
    await send_preview(message.chat.id, data, state)
    if 'text' in data and 'photo' in data:
        await BroadcastState.preview.set()
    elif 'text' in data:
        await BroadcastState.photo.set()
    else:
        await BroadcastState.text.set()

async def send_broadcast_to_users(text, photo, chat_id):
    logging.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: text={text}, photo={photo}")
    try:
        user_ids = get_all_user_ids()
        for user_id in user_ids:
            if text.strip():
                try:
                    if photo:
                        logging.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                        await bot.send_photo(user_id, photo, caption=text, parse_mode='HTML')
                    else:
                        logging.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {text}")
                        await bot.send_message(user_id, text, parse_mode='HTML')
                except Exception as e:
                    logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID {user_id}: {str(e)}")

        await bot.send_message(chat_id, f"–†–æ–∑—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –¥–ª—è {len(user_ids)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    except Exception as e:
        await bot.send_message(chat_id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        
@dp.callback_query_handler(text="cancel_broadcast", state=BroadcastState.preview)
async def cancel_broadcast_callback(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("–†–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞.")
    await call.answer()

@dp.message_handler(lambda message: message.text == '–ü–∏—Ç–∞–Ω–Ω—è ‚ùì')
async def questions_handler(message: types.Message):
    if message.from_user.id in admins:
        unanswered_questions = get_unanswered_questions()
        if not unanswered_questions:
            await message.answer("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å.")
        else:
            for question in unanswered_questions:
                user_id, user_name, question_text, question_id = question
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f'reply_{user_id}_{question_id}'))
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user_name} (ID: {user_id}) –∑–∞–¥–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è:\n{question_text}", reply_markup=keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)